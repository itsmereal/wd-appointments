{"version":3,"file":"static/js/300.43eb65f7.chunk.js","mappings":"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","sources":["services/calendar/GoogleCalendarService.js"],"sourcesContent":["import {\n  CalendarService,\n  CalendarError,\n  CalendarServiceError,\n} from './CalendarService';\n\nexport class GoogleCalendarService extends CalendarService {\n  constructor(config) {\n    super(config);\n    this.tokenClient = null;\n    this.accessToken = null;\n    this.SCOPES = [\n      'https://www.googleapis.com/auth/calendar',\n      'https://www.googleapis.com/auth/calendar.events',\n    ];\n  }\n\n  async initialize() {\n    if (!window.google) {\n      await this.loadGoogleAPI();\n    }\n\n    this.tokenClient = window.google.accounts.oauth2.initTokenClient({\n      client_id: this.config.clientId,\n      scope: this.SCOPES.join(' '),\n      callback: (response) => {\n        if (response.error) {\n          throw new CalendarServiceError(\n            CalendarError.AUTHENTICATION_FAILED,\n            'Failed to authenticate with Google Calendar'\n          );\n        }\n        this.accessToken = response.access_token;\n      },\n    });\n  }\n\n  async loadGoogleAPI() {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = 'https://accounts.google.com/gsi/client';\n      script.async = true;\n      script.defer = true;\n      script.onload = resolve;\n      script.onerror = () => reject(new Error('Failed to load Google API'));\n      document.head.appendChild(script);\n    });\n  }\n\n  async authenticate() {\n    if (!this.tokenClient) {\n      await this.initialize();\n    }\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.tokenClient.requestAccessToken();\n        resolve();\n      } catch (error) {\n        reject(\n          new CalendarServiceError(\n            CalendarError.AUTHENTICATION_FAILED,\n            'Failed to authenticate with Google Calendar',\n            error\n          )\n        );\n      }\n    });\n  }\n\n  async disconnect() {\n    if (this.accessToken) {\n      window.google.accounts.oauth2.revoke(this.accessToken);\n      this.accessToken = null;\n    }\n  }\n\n  async refreshToken() {\n    if (!this.tokenClient) {\n      await this.initialize();\n    }\n    await this.authenticate();\n  }\n\n  async createEvent(eventData) {\n    try {\n      const response = await this.makeRequest(\n        'POST',\n        '/calendar/v3/calendars/primary/events',\n        {\n          summary: eventData.title,\n          description: eventData.description,\n          start: {\n            dateTime: eventData.startTime.toISOString(),\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n          },\n          end: {\n            dateTime: eventData.endTime.toISOString(),\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n          },\n          attendees: eventData.attendees?.map((email) => ({ email })),\n          conferenceData: eventData.meetingLink\n            ? {\n                createRequest: {\n                  requestId: Math.random().toString(36).substring(2),\n                  conferenceSolutionKey: { type: 'hangoutsMeet' },\n                },\n              }\n            : undefined,\n        }\n      );\n\n      return this.parseEventData(response);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async updateEvent(eventId, eventData) {\n    try {\n      const response = await this.makeRequest(\n        'PUT',\n        `/calendar/v3/calendars/primary/events/${eventId}`,\n        {\n          summary: eventData.title,\n          description: eventData.description,\n          start: {\n            dateTime: eventData.startTime.toISOString(),\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n          },\n          end: {\n            dateTime: eventData.endTime.toISOString(),\n            timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n          },\n          attendees: eventData.attendees?.map((email) => ({ email })),\n        }\n      );\n\n      return this.parseEventData(response);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async deleteEvent(eventId) {\n    try {\n      await this.makeRequest(\n        'DELETE',\n        `/calendar/v3/calendars/primary/events/${eventId}`\n      );\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getEvent(eventId) {\n    try {\n      const response = await this.makeRequest(\n        'GET',\n        `/calendar/v3/calendars/primary/events/${eventId}`\n      );\n      return this.parseEventData(response);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async listEvents(params) {\n    try {\n      const queryParams = new URLSearchParams({\n        timeMin: params.startTime.toISOString(),\n        timeMax: params.endTime.toISOString(),\n        singleEvents: true,\n        orderBy: 'startTime',\n      });\n\n      const response = await this.makeRequest(\n        'GET',\n        `/calendar/v3/calendars/primary/events?${queryParams.toString()}`\n      );\n\n      return response.items.map((event) => this.parseEventData(event));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  async getAvailability(startDate, endDate) {\n    try {\n      const events = await this.listEvents({\n        startTime: startDate,\n        endTime: endDate,\n      });\n\n      return events.map((event) => ({\n        start: new Date(event.start.dateTime || event.start.date),\n        end: new Date(event.end.dateTime || event.end.date),\n      }));\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  isAuthenticated() {\n    return !!this.accessToken;\n  }\n\n  formatEventData(appointmentData) {\n    const startTime = new Date(appointmentData.appointmentDate);\n    const endTime = new Date(\n      startTime.getTime() + appointmentData.duration * 60000\n    );\n\n    return {\n      title: `Appointment with ${appointmentData.clientName}`,\n      description: `Booking: ${appointmentData.formTitle}\\nClient: ${appointmentData.clientName}\\nEmail: ${appointmentData.clientEmail}`,\n      startTime,\n      endTime,\n      attendees: [appointmentData.clientEmail],\n      meetingLink: appointmentData.meetingType === 'google_meet',\n    };\n  }\n\n  parseEventData(calendarEvent) {\n    return {\n      id: calendarEvent.id,\n      title: calendarEvent.summary,\n      description: calendarEvent.description,\n      startTime: new Date(\n        calendarEvent.start.dateTime || calendarEvent.start.date\n      ),\n      endTime: new Date(calendarEvent.end.dateTime || calendarEvent.end.date),\n      meetingLink: calendarEvent.conferenceData?.entryPoints?.[0]?.uri,\n      attendees:\n        calendarEvent.attendees?.map((attendee) => attendee.email) || [],\n    };\n  }\n\n  async makeRequest(method, endpoint, data = null) {\n    if (!this.accessToken) {\n      throw new CalendarServiceError(\n        CalendarError.AUTHENTICATION_FAILED,\n        'Not authenticated with Google Calendar'\n      );\n    }\n\n    try {\n      const response = await fetch(`https://www.googleapis.com${endpoint}`, {\n        method,\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: data ? JSON.stringify(data) : undefined,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      if (method !== 'DELETE') {\n        return await response.json();\n      }\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  handleError(error) {\n    if (error instanceof CalendarServiceError) {\n      return error;\n    }\n\n    if (error.status === 401) {\n      return new CalendarServiceError(\n        CalendarError.TOKEN_EXPIRED,\n        'Google Calendar token expired'\n      );\n    }\n\n    if (error.status === 403) {\n      return new CalendarServiceError(\n        CalendarError.PERMISSION_DENIED,\n        'Permission denied for Google Calendar'\n      );\n    }\n\n    if (error.status === 404) {\n      return new CalendarServiceError(\n        CalendarError.EVENT_NOT_FOUND,\n        'Calendar event not found'\n      );\n    }\n\n    return new CalendarServiceError(\n      CalendarError.UNKNOWN_ERROR,\n      'An error occurred with Google Calendar',\n      error\n    );\n  }\n}\n"],"names":["GoogleCalendarService","CalendarService","constructor","config","super","this","tokenClient","accessToken","SCOPES","initialize","window","google","loadGoogleAPI","accounts","oauth2","initTokenClient","client_id","clientId","scope","join","callback","response","error","CalendarServiceError","CalendarError","AUTHENTICATION_FAILED","access_token","Promise","resolve","reject","script","document","createElement","src","async","defer","onload","onerror","Error","head","appendChild","authenticate","requestAccessToken","disconnect","revoke","refreshToken","createEvent","eventData","_eventData$attendees","makeRequest","summary","title","description","start","dateTime","startTime","toISOString","timeZone","Intl","DateTimeFormat","resolvedOptions","end","endTime","attendees","map","email","conferenceData","meetingLink","createRequest","requestId","Math","random","toString","substring","conferenceSolutionKey","type","undefined","parseEventData","handleError","updateEvent","eventId","_eventData$attendees2","deleteEvent","getEvent","listEvents","params","queryParams","URLSearchParams","timeMin","timeMax","singleEvents","orderBy","items","event","getAvailability","startDate","endDate","Date","date","isAuthenticated","formatEventData","appointmentData","appointmentDate","getTime","duration","clientName","formTitle","clientEmail","meetingType","calendarEvent","_calendarEvent$confer","_calendarEvent$confer2","_calendarEvent$confer3","_calendarEvent$attend","id","entryPoints","uri","attendee","method","endpoint","data","arguments","length","fetch","headers","Authorization","body","JSON","stringify","ok","status","json","TOKEN_EXPIRED","PERMISSION_DENIED","EVENT_NOT_FOUND","UNKNOWN_ERROR"],"sourceRoot":""}