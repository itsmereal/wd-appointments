{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';import settingsService,{defaultSettings,SettingsSection}from'../services/settings';import{useApp}from'./AppContext';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const SettingsContext=/*#__PURE__*/createContext();// Action types\nconst ActionTypes={SET_SETTINGS:'SET_SETTINGS',UPDATE_SETTINGS:'UPDATE_SETTINGS',SET_LOADING:'SET_LOADING',SET_ERROR:'SET_ERROR',RESET_SETTINGS:'RESET_SETTINGS'};// Initial state\nconst initialState={settings:defaultSettings,loading:false,error:null,initialized:false};// Reducer\nfunction settingsReducer(state,action){switch(action.type){case ActionTypes.SET_SETTINGS:return{...state,settings:action.payload,initialized:true,error:null};case ActionTypes.UPDATE_SETTINGS:return{...state,settings:{...state.settings,[action.payload.section]:{...state.settings[action.payload.section],...action.payload.settings}},error:null};case ActionTypes.SET_LOADING:return{...state,loading:action.payload};case ActionTypes.SET_ERROR:return{...state,error:action.payload,loading:false};case ActionTypes.RESET_SETTINGS:return{...state,settings:defaultSettings,error:null};default:return state;}}// Provider component\nexport function SettingsProvider(_ref){let{children}=_ref;const[state,dispatch]=useReducer(settingsReducer,initialState);const{showNotification}=useApp();// Load all settings\nconst loadSettings=async()=>{try{dispatch({type:ActionTypes.SET_LOADING,payload:true});const settings=await settingsService.getSettings();dispatch({type:ActionTypes.SET_SETTINGS,payload:settings});}catch(error){dispatch({type:ActionTypes.SET_ERROR,payload:error.message});showNotification('error','Failed to load settings');}finally{dispatch({type:ActionTypes.SET_LOADING,payload:false});}};// Load settings on mount\nuseEffect(()=>{loadSettings();},[]);// Update settings for a specific section\nconst updateSettings=async(section,settings)=>{try{dispatch({type:ActionTypes.SET_LOADING,payload:true});// Update local state immediately for better UX\ndispatch({type:ActionTypes.UPDATE_SETTINGS,payload:{section,settings}});// Send update to server\nawait settingsService.updateSettings({...state.settings,[section]:{...state.settings[section],...settings}});showNotification('success','Settings updated successfully');}catch(error){dispatch({type:ActionTypes.SET_ERROR,payload:error.message});showNotification('error','Failed to update settings');// Reload settings to ensure consistency\nawait loadSettings();}finally{dispatch({type:ActionTypes.SET_LOADING,payload:false});}};// Reset settings to defaults\nconst resetSettings=async()=>{try{dispatch({type:ActionTypes.SET_LOADING,payload:true});await settingsService.resetSettings();dispatch({type:ActionTypes.RESET_SETTINGS});showNotification('success','Settings reset to defaults');}catch(error){dispatch({type:ActionTypes.SET_ERROR,payload:error.message});showNotification('error','Failed to reset settings');}finally{dispatch({type:ActionTypes.SET_LOADING,payload:false});}};// Import settings\nconst importSettings=async settings=>{try{dispatch({type:ActionTypes.SET_LOADING,payload:true});await settingsService.importSettings(settings);await loadSettings();// Reload settings after import\nshowNotification('success','Settings imported successfully');}catch(error){dispatch({type:ActionTypes.SET_ERROR,payload:error.message});showNotification('error','Failed to import settings');}finally{dispatch({type:ActionTypes.SET_LOADING,payload:false});}};// Export settings\nconst exportSettings=async()=>{try{dispatch({type:ActionTypes.SET_LOADING,payload:true});const exportData=await settingsService.exportSettings();return exportData;}catch(error){dispatch({type:ActionTypes.SET_ERROR,payload:error.message});showNotification('error','Failed to export settings');return null;}finally{dispatch({type:ActionTypes.SET_LOADING,payload:false});}};// Get settings for a specific section\nconst getSettings=section=>{return state.settings[section]||defaultSettings[section];};// Context value\nconst value={...state,updateSettings,resetSettings,importSettings,exportSettings,getSettings,loadSettings};return/*#__PURE__*/_jsx(SettingsContext.Provider,{value:value,children:children});}// Custom hook to use settings context\nexport function useSettings(){const context=useContext(SettingsContext);if(context===undefined){throw new Error('useSettings must be used within a SettingsProvider');}return context;}// Export context for advanced use cases\nexport default SettingsContext;// Export sections enum\nexport{SettingsSection};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","settingsService","defaultSettings","SettingsSection","useApp","jsx","_jsx","SettingsContext","ActionTypes","SET_SETTINGS","UPDATE_SETTINGS","SET_LOADING","SET_ERROR","RESET_SETTINGS","initialState","settings","loading","error","initialized","settingsReducer","state","action","type","payload","section","SettingsProvider","_ref","children","dispatch","showNotification","loadSettings","getSettings","message","updateSettings","resetSettings","importSettings","exportSettings","exportData","value","Provider","useSettings","context","undefined","Error"],"sources":["/Users/real/Local Sites/wdbooking/app/public/wp-content/plugins/wd-appointments/admin/react-app/src/context/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport settingsService, {\n  defaultSettings,\n  SettingsSection,\n} from '../services/settings';\nimport { useApp } from './AppContext';\n\n// Create context\nconst SettingsContext = createContext();\n\n// Action types\nconst ActionTypes = {\n  SET_SETTINGS: 'SET_SETTINGS',\n  UPDATE_SETTINGS: 'UPDATE_SETTINGS',\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  RESET_SETTINGS: 'RESET_SETTINGS',\n};\n\n// Initial state\nconst initialState = {\n  settings: defaultSettings,\n  loading: false,\n  error: null,\n  initialized: false,\n};\n\n// Reducer\nfunction settingsReducer(state, action) {\n  switch (action.type) {\n    case ActionTypes.SET_SETTINGS:\n      return {\n        ...state,\n        settings: action.payload,\n        initialized: true,\n        error: null,\n      };\n    case ActionTypes.UPDATE_SETTINGS:\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          [action.payload.section]: {\n            ...state.settings[action.payload.section],\n            ...action.payload.settings,\n          },\n        },\n        error: null,\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    case ActionTypes.RESET_SETTINGS:\n      return {\n        ...state,\n        settings: defaultSettings,\n        error: null,\n      };\n    default:\n      return state;\n  }\n}\n\n// Provider component\nexport function SettingsProvider({ children }) {\n  const [state, dispatch] = useReducer(settingsReducer, initialState);\n  const { showNotification } = useApp();\n\n  // Load all settings\n  const loadSettings = async () => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      const settings = await settingsService.getSettings();\n      dispatch({ type: ActionTypes.SET_SETTINGS, payload: settings });\n    } catch (error) {\n      dispatch({ type: ActionTypes.SET_ERROR, payload: error.message });\n      showNotification('error', 'Failed to load settings');\n    } finally {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n    }\n  };\n\n  // Load settings on mount\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  // Update settings for a specific section\n  const updateSettings = async (section, settings) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n\n      // Update local state immediately for better UX\n      dispatch({\n        type: ActionTypes.UPDATE_SETTINGS,\n        payload: { section, settings },\n      });\n\n      // Send update to server\n      await settingsService.updateSettings({\n        ...state.settings,\n        [section]: {\n          ...state.settings[section],\n          ...settings,\n        },\n      });\n\n      showNotification('success', 'Settings updated successfully');\n    } catch (error) {\n      dispatch({ type: ActionTypes.SET_ERROR, payload: error.message });\n      showNotification('error', 'Failed to update settings');\n\n      // Reload settings to ensure consistency\n      await loadSettings();\n    } finally {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n    }\n  };\n\n  // Reset settings to defaults\n  const resetSettings = async () => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      await settingsService.resetSettings();\n      dispatch({ type: ActionTypes.RESET_SETTINGS });\n      showNotification('success', 'Settings reset to defaults');\n    } catch (error) {\n      dispatch({ type: ActionTypes.SET_ERROR, payload: error.message });\n      showNotification('error', 'Failed to reset settings');\n    } finally {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n    }\n  };\n\n  // Import settings\n  const importSettings = async (settings) => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      await settingsService.importSettings(settings);\n      await loadSettings(); // Reload settings after import\n      showNotification('success', 'Settings imported successfully');\n    } catch (error) {\n      dispatch({ type: ActionTypes.SET_ERROR, payload: error.message });\n      showNotification('error', 'Failed to import settings');\n    } finally {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n    }\n  };\n\n  // Export settings\n  const exportSettings = async () => {\n    try {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: true });\n      const exportData = await settingsService.exportSettings();\n      return exportData;\n    } catch (error) {\n      dispatch({ type: ActionTypes.SET_ERROR, payload: error.message });\n      showNotification('error', 'Failed to export settings');\n      return null;\n    } finally {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: false });\n    }\n  };\n\n  // Get settings for a specific section\n  const getSettings = (section) => {\n    return state.settings[section] || defaultSettings[section];\n  };\n\n  // Context value\n  const value = {\n    ...state,\n    updateSettings,\n    resetSettings,\n    importSettings,\n    exportSettings,\n    getSettings,\n    loadSettings,\n  };\n\n  return (\n    <SettingsContext.Provider value={value}>\n      {children}\n    </SettingsContext.Provider>\n  );\n}\n\n// Custom hook to use settings context\nexport function useSettings() {\n  const context = useContext(SettingsContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n}\n\n// Export context for advanced use cases\nexport default SettingsContext;\n\n// Export sections enum\nexport { SettingsSection };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}