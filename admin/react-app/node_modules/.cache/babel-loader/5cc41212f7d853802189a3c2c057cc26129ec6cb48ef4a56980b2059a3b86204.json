{"ast":null,"code":"/**\n * Base Calendar Service class that defines the interface\n * for calendar integrations\n */export class CalendarService{constructor(config){if(this.constructor===CalendarService){throw new Error(\"Abstract class 'CalendarService' cannot be instantiated.\");}this.config=config;}// Authentication methods\nasync authenticate(){throw new Error('authenticate() must be implemented');}async disconnect(){throw new Error('disconnect() must be implemented');}async refreshToken(){throw new Error('refreshToken() must be implemented');}// Event methods\nasync createEvent(eventData){throw new Error('createEvent() must be implemented');}async updateEvent(eventId,eventData){throw new Error('updateEvent() must be implemented');}async deleteEvent(eventId){throw new Error('deleteEvent() must be implemented');}async getEvent(eventId){throw new Error('getEvent() must be implemented');}async listEvents(params){throw new Error('listEvents() must be implemented');}// Availability methods\nasync getAvailability(startDate,endDate){throw new Error('getAvailability() must be implemented');}// Helper methods\nisAuthenticated(){throw new Error('isAuthenticated() must be implemented');}formatEventData(appointmentData){throw new Error('formatEventData() must be implemented');}parseEventData(calendarEvent){throw new Error('parseEventData() must be implemented');}}/**\n * Factory function to create calendar service instances\n */export const createCalendarService=async(type,config)=>{let service;switch(type){case'google':{const module=await import('./GoogleCalendarService');service=new module.GoogleCalendarService(config);break;}case'icloud':// TODO: Implement iCloud calendar service\nthrow new Error('iCloud calendar service not implemented yet');default:throw new Error(`Unsupported calendar type: ${type}`);}return service;};/**\n * Event data interface\n * @typedef {Object} EventData\n * @property {string} title - Event title\n * @property {string} description - Event description\n * @property {Date} startTime - Event start time\n * @property {Date} endTime - Event end time\n * @property {string} [location] - Event location (optional)\n * @property {string} [meetingLink] - Virtual meeting link (optional)\n * @property {Array<string>} [attendees] - List of attendee email addresses\n *//**\n * Appointment data interface\n * @typedef {Object} AppointmentData\n * @property {string} clientName - Client's name\n * @property {string} clientEmail - Client's email\n * @property {Date} appointmentDate - Appointment date and time\n * @property {number} duration - Duration in minutes\n * @property {string} formTitle - Booking form title\n * @property {string} [location] - Appointment location\n * @property {string} [meetingType] - Type of meeting (google_meet, zoom, phone, custom)\n */export const CalendarError={AUTHENTICATION_FAILED:'AUTHENTICATION_FAILED',TOKEN_EXPIRED:'TOKEN_EXPIRED',PERMISSION_DENIED:'PERMISSION_DENIED',EVENT_NOT_FOUND:'EVENT_NOT_FOUND',INVALID_DATA:'INVALID_DATA',NETWORK_ERROR:'NETWORK_ERROR',UNKNOWN_ERROR:'UNKNOWN_ERROR'};export class CalendarServiceError extends Error{constructor(type,message){let originalError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;super(message);this.name='CalendarServiceError';this.type=type;this.originalError=originalError;}}","map":{"version":3,"names":["CalendarService","constructor","config","Error","authenticate","disconnect","refreshToken","createEvent","eventData","updateEvent","eventId","deleteEvent","getEvent","listEvents","params","getAvailability","startDate","endDate","isAuthenticated","formatEventData","appointmentData","parseEventData","calendarEvent","createCalendarService","type","service","module","GoogleCalendarService","CalendarError","AUTHENTICATION_FAILED","TOKEN_EXPIRED","PERMISSION_DENIED","EVENT_NOT_FOUND","INVALID_DATA","NETWORK_ERROR","UNKNOWN_ERROR","CalendarServiceError","message","originalError","arguments","length","undefined","name"],"sources":["/Users/real/Local Sites/wdbooking/app/public/wp-content/plugins/wd-appointments/admin/react-app/src/services/calendar/CalendarService.js"],"sourcesContent":["/**\n * Base Calendar Service class that defines the interface\n * for calendar integrations\n */\nexport class CalendarService {\n  constructor(config) {\n    if (this.constructor === CalendarService) {\n      throw new Error(\n        \"Abstract class 'CalendarService' cannot be instantiated.\"\n      );\n    }\n    this.config = config;\n  }\n\n  // Authentication methods\n  async authenticate() {\n    throw new Error('authenticate() must be implemented');\n  }\n\n  async disconnect() {\n    throw new Error('disconnect() must be implemented');\n  }\n\n  async refreshToken() {\n    throw new Error('refreshToken() must be implemented');\n  }\n\n  // Event methods\n  async createEvent(eventData) {\n    throw new Error('createEvent() must be implemented');\n  }\n\n  async updateEvent(eventId, eventData) {\n    throw new Error('updateEvent() must be implemented');\n  }\n\n  async deleteEvent(eventId) {\n    throw new Error('deleteEvent() must be implemented');\n  }\n\n  async getEvent(eventId) {\n    throw new Error('getEvent() must be implemented');\n  }\n\n  async listEvents(params) {\n    throw new Error('listEvents() must be implemented');\n  }\n\n  // Availability methods\n  async getAvailability(startDate, endDate) {\n    throw new Error('getAvailability() must be implemented');\n  }\n\n  // Helper methods\n  isAuthenticated() {\n    throw new Error('isAuthenticated() must be implemented');\n  }\n\n  formatEventData(appointmentData) {\n    throw new Error('formatEventData() must be implemented');\n  }\n\n  parseEventData(calendarEvent) {\n    throw new Error('parseEventData() must be implemented');\n  }\n}\n\n/**\n * Factory function to create calendar service instances\n */\nexport const createCalendarService = async (type, config) => {\n  let service;\n  switch (type) {\n    case 'google': {\n      const module = await import('./GoogleCalendarService');\n      service = new module.GoogleCalendarService(config);\n      break;\n    }\n    case 'icloud':\n      // TODO: Implement iCloud calendar service\n      throw new Error('iCloud calendar service not implemented yet');\n    default:\n      throw new Error(`Unsupported calendar type: ${type}`);\n  }\n  return service;\n};\n\n/**\n * Event data interface\n * @typedef {Object} EventData\n * @property {string} title - Event title\n * @property {string} description - Event description\n * @property {Date} startTime - Event start time\n * @property {Date} endTime - Event end time\n * @property {string} [location] - Event location (optional)\n * @property {string} [meetingLink] - Virtual meeting link (optional)\n * @property {Array<string>} [attendees] - List of attendee email addresses\n */\n\n/**\n * Appointment data interface\n * @typedef {Object} AppointmentData\n * @property {string} clientName - Client's name\n * @property {string} clientEmail - Client's email\n * @property {Date} appointmentDate - Appointment date and time\n * @property {number} duration - Duration in minutes\n * @property {string} formTitle - Booking form title\n * @property {string} [location] - Appointment location\n * @property {string} [meetingType] - Type of meeting (google_meet, zoom, phone, custom)\n */\n\nexport const CalendarError = {\n  AUTHENTICATION_FAILED: 'AUTHENTICATION_FAILED',\n  TOKEN_EXPIRED: 'TOKEN_EXPIRED',\n  PERMISSION_DENIED: 'PERMISSION_DENIED',\n  EVENT_NOT_FOUND: 'EVENT_NOT_FOUND',\n  INVALID_DATA: 'INVALID_DATA',\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n};\n\nexport class CalendarServiceError extends Error {\n  constructor(type, message, originalError = null) {\n    super(message);\n    this.name = 'CalendarServiceError';\n    this.type = type;\n    this.originalError = originalError;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}